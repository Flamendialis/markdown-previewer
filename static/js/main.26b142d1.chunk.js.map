{"version":3,"sources":["components/MarkdownPreviewer/MarkdownPreviewer.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","breaks","MarkdownPreviewer","props","state","input","editorExpanded","previewExpanded","copyText","bind","download","expandEditor","expandPreview","this","document","getElementById","classList","remove","setState","Object","assign","add","text","replace","blob","Blob","type","anchor","createElement","fileName","href","window","URL","createObjectURL","target","style","display","body","appendChild","click","removeChild","querySelector","select","execCommand","alert","event","newState","value","className","id","onClick","icon","faFileDownload","faCopy","faCompress","faExpand","onChange","handleChange","dangerouslySetInnerHTML","__html","React","Component","defaultProps","Boolean","location","hostname","match","ReactDOM","render","StrictMode","rel","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26b142d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MarkdownPreviewer.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCopy, faFileDownload, faExpand, faCompress } from '@fortawesome/free-solid-svg-icons'\r\n\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  breaks: true,\r\n});\r\n\r\n\r\n\r\nclass MarkdownPreviewer extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n          this.state = {\r\n            input: '',\r\n            editorExpanded: false,\r\n            previewExpanded: false\r\n          }\r\n    this.copyText = this.copyText.bind(this);\r\n    this.download = this.download.bind(this);\r\n    this.expandEditor = this.expandEditor.bind(this);\r\n    this.expandPreview = this.expandPreview.bind(this);\r\n    }\r\n    expandEditor() {\r\n      if(this.state.editorExpanded){\r\n        document.getElementById(\"editor-container\").classList.remove(\"expanded\");\r\n        document.getElementById(\"preview-container\").classList.remove(\"preview-collapsed\");\r\n        this.setState((state) => Object.assign({},state,{\r\n          editorExpanded : false\r\n        }));\r\n      }\r\n      else{\r\n        document.getElementById(\"editor-container\").classList.add(\"expanded\");\r\n        document.getElementById(\"preview-container\").classList.add(\"preview-collapsed\");\r\n        this.setState((state) => Object.assign({},state,{\r\n          editorExpanded : true\r\n        }));\r\n      }\r\n\r\n    }\r\n    expandPreview() {\r\n      if(this.state.previewExpanded){\r\n        document.getElementById(\"preview-container\").classList.remove(\"expanded\");\r\n        document.getElementById(\"editor-container\").classList.remove(\"editor-collapsed\");\r\n        ;\r\n        this.setState((state) => Object.assign({},state,{\r\n          previewExpanded : false\r\n        }));\r\n      }\r\n      else{\r\n        document.getElementById(\"preview-container\").classList.add(\"expanded\");\r\n        document.getElementById(\"editor-container\").classList.add(\"editor-collapsed\");\r\n        this.setState((state) => Object.assign({},state,{\r\n          previewExpanded : true\r\n        }));\r\n      }\r\n\r\n    }\r\n    download() {\r\n      var text = this.state.input;\r\n      text = text.replace(/\\n/g, \"\\r\\n\");\r\n      var blob = new Blob([text], { type: \"text/plain\"});\r\n      var anchor = document.createElement(\"a\");\r\n      anchor.download = this.props.fileName;\r\n      anchor.href = window.URL.createObjectURL(blob);\r\n      anchor.target =\"_blank\";\r\n      anchor.style.display = \"none\"; \r\n      document.body.appendChild(anchor);\r\n      anchor.click();\r\n      document.body.removeChild(anchor);\r\n    }\r\n\r\n    copyText() {\r\n      document.querySelector(\"#editor\").select();\r\n      document.execCommand(\"copy\");\r\n      alert(\"Markdown copy to clipboard\");\r\n    }\r\n    handleChange(event) {\r\n      let newState= Object.assign({},this.state,{input: event.target.value});\r\n      this.setState(newState);\r\n    }\r\n   componentDidMount() {\r\n    this.setState((state) => Object.assign({},state,{\r\n      input: this.props.text\r\n    }));\r\n\r\n\r\n   }\r\n\r\n\r\n    \r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"container\">\r\n          <div id=\"editor-container\" >\r\n            <div className=\"header\">\r\n              <p>Editor</p>\r\n              <button onClick={this.download}><FontAwesomeIcon className=\"icon\" icon = {faFileDownload} /></button>\r\n              <button onClick={this.copyText}><FontAwesomeIcon className=\"icon\" icon = {faCopy} /></button>\r\n              <button onClick={this.expandEditor} ><FontAwesomeIcon className=\"icon expand\"icon = {!this.state.editorExpanded ? faExpand : faCompress}/></button>\r\n            </div>\r\n            <textarea  id=\"editor\" className=\"editor\" value={this.state.input} onChange = {this.handleChange.bind(this)}></textarea>   \r\n          </div>\r\n          <div id=\"preview-container\" >\r\n            <div className=\"header header-preview\">\r\n              <p>Preview</p>\r\n              <button onClick={this.expandPreview}><FontAwesomeIcon className=\"icon expand\" icon = {!this.state.previewExpanded ? faExpand : faCompress} /></button>\r\n            </div>\r\n            <div id=\"preview\" className=\"preview\" dangerouslySetInnerHTML={{__html:marked(this.state.input)}}></div>\r\n              \r\n          </div>\r\n        </div> \r\n      );\r\n    }\r\n  }\r\n  MarkdownPreviewer.defaultProps = {fileName: 'markdown.txt'}\r\n\r\n  export default MarkdownPreviewer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport MarkdownPreviewer from './components/MarkdownPreviewer';\nimport * as serviceWorker from './serviceWorker';\n\nconst initialText = \n`# Markdown Previewer\n![very good|512x397,20%](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Font_Awesome_5_brands_markdown.svg/200px-Font_Awesome_5_brands_markdown.svg.png)\nYou can use this tool to preview the markdown for your GitHub readme files.\n\n* Copy:\n\nCopy your markdown text directly to the clipboard so you can paste it directly on your readme file.\n\n* Download:\n\nDownload your markdown and then upload it to your repository.\n\n## Put some code in your files\n\n**Single line code** \n\n\\`<p>Like this</p>\\`\n\n**Full blocks**\n\n\\`\\`\\`\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\n\nYou can use all the features of markdown format\nCheck [here](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) all your options.\n\n> Félix :)\n\n`;\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"main-container\">\n      <div className=\"previewer-container\">\n        <MarkdownPreviewer text={initialText} fileName = 'README.md' />\n      </div>\n      <div className=\"footer\">\n        <p>Created by Félix Menéndez using React</p>\n        <p>Powered by <a href='https://marked.js.org/' target=\"_blank\" rel=\"noopener noreferrer\">Marked.js</a></p>\n      </div>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}